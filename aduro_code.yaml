counter:
    aduro_pellets_refill_counter:
    name: Aduro Pellets Refill Counter
    initial: 0
    step: 1
    
timer:
  aduro_timer_startup_1:
    duration: "00:15:00"

  aduro_timer_startup_2:
    duration: "00:15:00"

input_boolean:
  aduro_start_stop:
    name: Aduro start
    icon: mdi:fireplace

  aduro_toggle_heat_target:
    name: Aduro toggle heat target

  aduro_shut_down_at_specific_pellets_level:
    name: Aduro shut down at specific pellets level

input_number:
  aduro_heatlevel:
    name: Aduro heatlevel
    min: 1
    max: 3
    step: 1

  aduro_boiler_ref:
    name: Aduro boiler ref
    min: 5
    max: 35
    step: 1

  aduro_capacity_pellets:
    name: Aduro capacity pellets
    min: 9
    max: 10
    step: 0.1

  aduro_notification_pellets_level:
    name: Aduro notifications pellets level
    min: 0
    max: 20
    step: 1

  aduro_shut_down_pellets_level:
    name: Aduro shut down pellets level
    min: -10
    max: 15
    step: 1

  aduro_operation_mode_target_2:
    name: Aduro operation mode target 2
    min: 0
    max: 2
    step: 1

input_button:
  aduro_stove_refilled:
    name: Aduro stove refilled

  aduro_stove_cleaned:
    name: Aduro stove cleaned

template:
  - sensor:
      - name: "Aduro amount of pellets in stove"
        unit_of_measurement: "Kg"
        state: "{{ states('input_number.aduro_capacity_pellets') | float - states('sensor.aduro_forbrukad_mangd_pellets') | round(1) }}"

  - sensor:
      - name: "Aduro percentage pellets in stove"
        unit_of_measurement: "%"
        state: >-
          {% if is_number(states('input_number.aduro_capacity_pellets')) and 
                is_number(states('sensor.aduro_forbrukad_mangd_pellets')) and 
                states('input_number.aduro_capacity_pellets') | float > 0 %}
            {{ ((( states('input_number.aduro_capacity_pellets') | float - 
                   states('sensor.aduro_forbrukad_mangd_pellets') | float ) / 
                 states('input_number.aduro_capacity_pellets') | float ) * 100) | round(0) }}
          {% else %}
            unknown
          {% endif %}

  - sensor:
      - name: "Aduro heatlevel boolean check"
        state: >
          {% if states('sensor.aduro_h2_stove_heatlevel') != 'unknown' and states('input_number.aduro_heatlevel') != 'unknown' and (states.sensor.aduro_h2_stove_heatlevel.state | float) == (states.input_number.aduro_heatlevel.state | float) %}
            OK
          {% else %}
            Difference
          {% endif %}

  - sensor:
      - name: "Aduro temp boolean check"
        state: >
          {% if states('sensor.aduro_h2_boiler_ref') != 'unknown' and states('input_number.aduro_boiler_ref') != 'unknown' and (states.sensor.aduro_h2_boiler_ref.state | float) == (states.input_number.aduro_boiler_ref.state | float) %}
            OK
          {% else %}
            Difference
          {% endif %}

  - sensor:
      - name: "Aduro operation mode boolean check"
        state: >
          {% if states('sensor.aduro_h2_operation_mode') != 'unknown' and states('input_number.aduro_operation_mode_target_2') != 'unknown' and (states.sensor.aduro_h2_operation_mode.state | float) == (states.input_number.aduro_operation_mode_target_2.state | float) %}
            OK
          {% else %}
            Difference
          {% endif %}

  - sensor:
      - name: "Aduro heatlevel"
        state: >
          {% if states.sensor.aduro_h2_stove_heatlevel.state == "1" %}
          I
          {% else %}
            {% if states.sensor.aduro_h2_stove_heatlevel.state == "2" %}
            II
            {% else %}
              {% if states.sensor.aduro_h2_stove_heatlevel.state == "3" %}
              III
              {% endif %}
            {% endif %}
          {% endif %}

  - sensor:
      - name: "Aduro operating mode target"
        state: >
          {% if states.sensor.aduro_h2_operation_mode.state == "1" %}
            {% if states('input_number.aduro_boiler_ref') != 'unknown' %}
              {{ states('input_number.aduro_boiler_ref') |round(0)}}
            {% else %}
              {{ states('sensor.aduro_h2_boiler_ref') |round(0)}}
            {% endif %}
          {% elif states.sensor.aduro_h2_operation_mode.state == "0" %}
            {% if states('input_number.aduro_heatlevel') != 'unknown' %}
              {{ states('input_number.aduro_heatlevel') | round(0) }}
            {% else %}
              {{ states('sensor.aduro_h2_stove_heatlevel') | round(0) }}
            {% endif %}
          {% else %}
            Ved
          {% endif %}

  # New sensor for tracking mode transition
  - sensor:
      - name: "Aduro mode transition"
        state: >
          {% if is_state('input_boolean.aduro_toggle_heat_target', 'on') %}
            starting
          {% elif (states('sensor.aduro_h2_operation_mode') == '0' and states('sensor.aduro_heatlevel_boolean_check') == 'Difference') %}
            heatlevel_adjusting
          {% elif (states('sensor.aduro_h2_operation_mode') == '1' and states('sensor.aduro_temp_boolean_check') == 'Difference') %}
            temperature_adjusting
          {% else %}
            idle
          {% endif %}

  # Updated change in progress sensor
  - sensor:
      - name: "Aduro change in progress"
        state: >
          {% if states('sensor.aduro_heatlevel_boolean_check') == 'OK' and 
                states('sensor.aduro_temp_boolean_check') == 'OK' and 
                states('sensor.aduro_operation_mode_boolean_check') == 'OK' %}
            false
          {% elif is_state('input_boolean.aduro_toggle_heat_target', 'on') %}
            true
          {% elif (states('sensor.aduro_heatlevel_boolean_check') == 'Difference') or
                  (states('sensor.aduro_temp_boolean_check') == 'Difference') or
                  (states('sensor.aduro_operation_mode_boolean_check') == 'Difference') %}
            true
          {% else %}
            false
          {% endif %}

  - sensor:
      - name: aduro_operation_mode_target
        state: >-
          {%- set op_mode = states('sensor.aduro_h2_operation_mode') | default('', true) -%}
          {%- set toggle_active = states('input_boolean.aduro_toggle_heat_target') == 'on' -%}

          {%- if op_mode == '' -%}
            0
          {%- elif toggle_active -%}
            {%- if op_mode == '0' -%}
              1
            {%- elif op_mode == '1' -%}
              0
            {%- else -%}
              {{ op_mode }}
            {%- endif -%}
          {%- else -%}
            {{ op_mode }}
          {%- endif -%}
        unit_of_measurement: "mode"
        state_class: measurement

  - sensor:
      - name: aduro_display_target
        state: >-
          {%- set op_mode_target_2 = states('input_number.aduro_operation_mode_target_2') | int(0) -%}
          {%- set display_target_2 = states('sensor.aduro_display_target') | int(0) -%}
          {%- set boiler_temp_2 = states('sensor.aduro_h2_boiler_temp') | float(0) | round(1) -%}
          {%- set change_in_progress_2 = states('sensor.aduro_change_in_progress') -%}

              {%- if change_in_progress_2 == 'true' -%}
                {%- if op_mode_target_2 == 0 -%}
                  {% set target_2 = "heatlevel" %}
                {%- elif op_mode_target_2 == 1 -%}
                  {% set target_2 = "temperature" %}
                {%- else -%}
                  {% set target_2 = "wood mode" %}
                {%- endif -%}
              {%- endif -%}

              {%- if change_in_progress_2 == 'false' -%}
                {%- if states('sensor.aduro_operation_mode_target') == '0' -%}
                  {% set target_2 = "heatlevel" %}
                {%- elif states('sensor.aduro_operation_mode_target') == '1' -%}
                  {% set target_2 = "temperature" %}
                {%- else -%}
                  {% set target_2 = "wood mode" %}
                {%- endif -%}
              {%- endif -%}

              {%- if target_2 == "heatlevel" -%}
                {{ states('input_number.aduro_heatlevel') | default(0, true) | round(0) }}
              {%- elif target_2 == "temperature" -%}
                {{ states('input_number.aduro_boiler_ref') | default(0, true) | round(0) }}
              {%- else -%}
                0
              {%- endif -%}

  - sensor:
      - name: aduro_display_target_heatlevel
        state: >
          {% set heat_level = states('sensor.aduro_display_target') | int(0) %}
          {% set level_map = {1: 'I', 2: 'II', 3: 'III'} %}
          {{ level_map.get(heat_level, heat_level) }}

  # New sensor to handle display formatting based on operation mode target
  - sensor:
      - name: aduro_display_format
        state: >-
          {%- set op_mode_target = states('input_number.aduro_operation_mode_target_2') | int(0) -%}
          {%- set display_target = states('sensor.aduro_display_target') | int(0) -%}
          {%- set display_target_heatlevel = states('sensor.aduro_display_target_heatlevel') -%}
          {%- set boiler_temp = states('sensor.aduro_h2_boiler_temp') | float(0) | round(1) -%}
          {%- set change_in_progress = states('sensor.aduro_change_in_progress') -%}

          {%- if change_in_progress == 'true' -%}
            {%- if op_mode_target == 0 -%}
              {% set target = "heatlevel" %}
            {%- elif op_mode_target == 1 -%}
              {% set target = "temperature" %}
            {%- else -%}
              {% set target = "wood mode" %}
            {%- endif -%}
          {%- endif -%}

          {%- if change_in_progress == 'false' -%}
            {%- if states('sensor.aduro_operation_mode_target') == '0' -%}
              {% set target = "heatlevel" %}
            {%- elif states('sensor.aduro_operation_mode_target') == '1' -%}
              {% set target = "temperature" %}
            {%- else -%}
              {% set target = "Wood mode" %}
            {%- endif -%}
          {%- endif -%}

          {%- if target == "heatlevel" -%}
            Heat Level (room temp.): {{ display_target_heatlevel }} ({{ boiler_temp }})°C
          {%- elif target == "temperature" -%}
            Target (room temp.): {{ display_target }} ({{ boiler_temp }})°C
          {%- else -%}
            Wood Mode
          {%- endif -%}

  - sensor:
      - name: "Aduro app change detected"
        state: >
          {% if is_state('input_boolean.aduro_toggle_heat_target', 'on') %}
            false
          {% elif (states('sensor.aduro_h2_operation_mode') == '0' and states('sensor.aduro_heatlevel_boolean_check') == 'Difference') %}
            {% if states('sensor.aduro_h2_stove_heatlevel') != states('sensor.aduro_h2_stove_heatlevel', 'unknown') %}
              true
            {% else %}
              false
            {% endif %}
          {% elif (states('sensor.aduro_h2_operation_mode') == '1' and states('sensor.aduro_temp_boolean_check') == 'Difference') %}
            {% if states('sensor.aduro_h2_boiler_ref') != states('sensor.aduro_h2_boiler_ref', 'unknown') %}
              true
            {% else %}
              false
            {% endif %}
          {% else %}
            false
          {% endif %}

  - button:
      - name: "Aduro toggle heat target button"
        icon: >
          {% if states('sensor.aduro_change_in_progress') == 'true' %}
            mdi:sync-circle
          {% elif states('sensor.aduro_h2_operation_mode') == '0' %}
            mdi:fire
          {% elif states('sensor.aduro_h2_operation_mode') == '1' %}
            mdi:thermometer
          {% elif states('sensor.aduro_h2_operation_mode') == '2' %}
            mdi:campfire
          {% else %}
            mdi:help-circle
          {% endif %}
        press:
          - service: input_boolean.toggle
            target:
              entity_id: input_boolean.aduro_toggle_heat_target

sensor:
  - platform: template
    sensors:
      aduro_mode_status_main:
        friendly_name: "Aduro status main"
        icon_template: >
          {% set mode = states.sensor.aduro_h2_operation_mode.state %}
          {% if mode == "1" %}
            mdi:thermometer
          {% elif mode == "0" %}
            mdi:fire
          {% else %}
            mdi:campfire
          {% endif %}
        value_template: >
          {% set state = states('sensor.aduro_h2_state') %}
          {% set substate = states('sensor.aduro_h2_substate') %}
          {% set heatlevel = states('sensor.aduro_heatlevel') %}

          {% if state in ['0', '2', '4', '5'] %}
            Drift {{ heatlevel }}
          {% elif state in ['6', '13', '20', '28', '34'] %}
            Slutade
          {% elif state == '9' %}
            Avstängd
          {% elif state == '14' and substate in ['0', '1'] %}
            Avstängd
          {% elif state == '32' %}
            Drift III
          {% else %}
            "{{ 'sensor.aduro_h2_state' }}"
          {% endif %}

  - platform: template
    sensors:
      aduro_mode_status_sub:
        friendly_name: "Aduro status sub"
        value_template: >
          {% set state = states('sensor.aduro_h2_state') %}
          {% set substate = states('sensor.aduro_h2_substate') %}

          {% if state == '0' %}
            vänta
          {% elif state == '2' %}
            Upptändning 1 ({{states('timer.aduro_timer_startup_1')}})
          {% elif state == '4' %}
            Upptändning 2 ({{states('timer.aduro_timer_startup_2')}})
          {% elif state == '5' %}
            Normal
          {% elif state == '6' %}
            Rumstemperatur nådd
          {% elif state == '9' %}
            Vedeldning
          {% elif state == '13' %}
            Misslyckad tändning, Öppna luckan och kontrollera brännaktivitet för pelletsansamling
          {% elif state == '14' and substate == '0' %}
            På knapp
          {% elif state == '14' and substate == '1' %}
            Vedeldning?
          {% elif state == '20' %}
            Inget bränsle
          {% elif state == '28' %}
            ?
          {% elif state == '32' %}
            Värmer upp
          {% elif state == '34' %}
            Kontrollera brännkoppen
          {% else %}
            "{{ 'sensor.aduro_h2_state' }}"
          {% endif %}



automation:
  - id: "aduro_mqtt_anrop"
    alias: "Aduro MQTT anrop"
    triggers:
      - trigger: time_pattern
        seconds: 20
    conditions: []
    actions:
      - action: script.pyduro_mqtt_all
    mode: single

  - id: "aduro_trigger_start_script"
    alias: "Aduro start script"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.aduro_start_stop
        to: "on"
    conditions: []
    actions:
      - action: script.pyduro_start
      - action: automation.trigger
        target:
          entity_id: automation.aduro_mqtt_anrop_trigger

  - id: "aduro_trigger_stop_script"
    alias: "Aduro stop script"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.aduro_start_stop
        to: "off"
    conditions: []
    actions:
      - action: script.pyduro_stop
      - action: automation.trigger
        target:
          entity_id: automation.aduro_mqtt_anrop_trigger

  - id: "aduro_trigger_set_heatlevel"
    alias: "Aduro trigger set heatlevel"
    triggers:
      - trigger: state
        entity_id:
          - input_number.aduro_heatlevel
    conditions: []
    actions:
      - action: script.pyduro_set_operation_mode_heatlevel
      - delay:
          hours: 0
          minutes: 0
          seconds: 3
          milliseconds: 0
      - action: script.pyduro_set_heatlevel
      - action: automation.trigger
        target:
          entity_id: automation.aduro_mqtt_anrop_trigger
    mode: parallel
    max: 10

  - id: "aduro_trigger_set_temp"
    alias: "Aduro trigger set temp"
    triggers:
      - trigger: state
        entity_id:
          - input_number.aduro_boiler_ref
        for:
          hours: 0
          minutes: 0
          seconds: 1
    conditions: []
    actions:
      - action: script.pyduro_set_temp
      - delay:
          hours: 0
          minutes: 0
          seconds: 3
          milliseconds: 0
      - action: script.pyduro_set_operation_mode_temp
      - action: automation.trigger
        target:
          entity_id: automation.aduro_mqtt_anrop_trigger
    mode: parallel
    max: 10

  - id: "aduro_mqtt_anrop_trigger"
    alias: "Aduro mqtt anrop trigger"
    mode: queued
    triggers: []
    actions:
      - repeat:
          count: 8
          sequence:
            - delay: 5
            - service: automation.trigger
              target:
                entity_id: automation.aduro_mqtt_anrop
      - service: automation.turn_off
        target:
          entity_id: automation.aduro_mqtt_anrop_trigger

  #Turns of input_boolean.aduro_start_stop when aduro stops. Needs to be updated with all possible states.
  - id: "aduro_boolean_auto_turn_off"
    alias: "Aduro boolean auto turn off"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.aduro_h2_state
    conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: sensor.aduro_h2_state
            state: "14"
          - condition: state
            entity_id: sensor.aduro_h2_state
            state: "20"
          - condition: state
            entity_id: sensor.aduro_h2_state
            state: "28"
          - condition: state
            entity_id: sensor.aduro_h2_state
            state: "34"
          - condition: state
            entity_id: sensor.aduro_h2_state
            state: "13"
          - condition: state
            entity_id: sensor.aduro_h2_state
            state: "9"
    actions:
      - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.aduro_start_stop

  # This automation will update the boiler_ref input_number when the stove value changes
  - id: "aduro_sync_boiler_ref_from_stove"
    alias: Aduro sync boiler ref from stove
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.aduro_h2_boiler_ref
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.aduro_temp_boolean_check
      - action: automation.turn_off
        target:
          entity_id: automation.aduro_trigger_set_temp
        data:
          stop_actions: true
      - if:
          - condition: template
            value_template: >-
              {{ states('sensor.aduro_h2_boiler_ref') != 'unknown' and
              states('sensor.aduro_h2_boiler_ref') != 'unavailable' and
              states('sensor.aduro_temp_boolean_check') == 'Difference' }}
        then:
          - data_template:
              entity_id: input_number.aduro_boiler_ref
              value: >-
                {% if states('sensor.aduro_h2_boiler_ref') == 'unknown' or
                states('sensor.aduro_h2_boiler_ref') == 'unavailable' %}
                  5.0
                {% else %}
                  {% set temp = states('sensor.aduro_h2_boiler_ref') | float(5.0) %}
                  {% if temp < 5.0 %}
                    5.0
                  {% elif temp > 35.0 %}
                    35.0
                  {% else %}
                    {{ temp }}
                  {% endif %}
                {% endif %}
            action: input_number.set_value
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.aduro_temp_boolean_check
      - action: automation.turn_on
        target:
          entity_id: automation.aduro_trigger_set_temp

  # This automation will update the heatlevel input_number when the stove value changes
  - id: "aduro_sync_heatlevel_from_stove"
    alias: Aduro sync heatlevel from stove
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.aduro_h2_stove_heatlevel
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.aduro_heatlevel_boolean_check
      - action: automation.turn_off
        target:
          entity_id: automation.aduro_trigger_set_heatlevel
        data:
          stop_actions: true
      - if:
          - condition: template
            value_template: >-
              {{ states('sensor.aduro_h2_stove_heatlevel') != 'unknown' and
              states('sensor.aduro_h2_stove_heatlevel') != 'unavailable' and
              states('sensor.aduro_heatlevel_boolean_check') == 'Difference' }}
        then:
          - data_template:
              entity_id: input_number.aduro_heatlevel
              value: >-
                {% if states('sensor.aduro_h2_stove_heatlevel') == 'unknown' or
                states('sensor.aduro_h2_stove_heatlevel') == 'unavailable' %}
                  1.0
                {% else %}
                  {% set level = states('sensor.aduro_h2_stove_heatlevel') | float(1.0) %}
                  {% if level < 1.0 %}
                    1.0
                  {% elif level > 3.0 %}
                    3.0
                  {% else %}
                    {{ level }}
                  {% endif %}
                {% endif %}
            action: input_number.set_value
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.aduro_heatlevel_boolean_check
      - action: automation.turn_on
        target:
          entity_id: automation.aduro_trigger_set_heatlevel

  - id: "aduro_update_sensors_pellets_refill"
    alias: "Aduro uppdate sensor för empty stove"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_button.aduro_stove_refilled
    conditions: []
    actions:
      - action: utility_meter.calibrate
        data:
          value: "0"
        target:
          entity_id: sensor.aduro_forbrukad_mangd_pellets
      - action: counter.increment
        target:
          entity_id: counter.aduro_pellets_refill_counter

  - id: "aduro_reset_cleaned_counter"
    alias: "Aduro återställ counter rengörning"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_button.aduro_stove_cleaned
    conditions: []
    actions:
      - action: counter.reset
        target:
          entity_id: counter.aduro_pellets_refill_counter

  # New automation to update the mode transition sensor
  - id: "aduro_track_operation_mode_change"
    alias: "Aduro track operation mode change"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.aduro_h2_operation_mode
      - trigger: state
        entity_id:
          - sensor.aduro_temp_boolean_check
      - trigger: state
        entity_id:
          - sensor.aduro_heatlevel_boolean_check
      - trigger: state
        entity_id:
          - sensor.aduro_operation_mode_boolean_check
    actions:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_mode_transition
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_change_in_progress

  # New automation to reset toggle heat target after timeout
  - id: "aduro_reset_toggle_heat_target"
    alias: "Aduro reset toggle heat target"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_boolean.aduro_toggle_heat_target
        to: "on"
        for:
          minutes: 2
    actions:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.aduro_toggle_heat_target
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_mode_transition
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_change_in_progress

  - id: "aduro_start_timer_startup_1"
    alias: "Aduro start timer startup 1"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.aduro_h2_state
        to: "2"
    conditions: []
    actions:
      - action: timer.start
        target:
          entity_id: timer.aduro_timer_startup_1

  - id: "aduro_start_timer_startup_2"
    alias: "Aduro start timer startup 2"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.aduro_h2_state
        to: "4"
    conditions: []
    actions:
      - action: timer.start
        target:
          entity_id: timer.aduro_timer_startup_2

  - id: "aduro_reset_change_in_progress"
    alias: "Aduro reset change in progress status"
    mode: single
    triggers:
      - platform: time_pattern
        minutes: "/5" # Run every 5 minutes
    conditions:
      - condition: template
        value_template: >
          {% set transition_time = states.sensor.aduro_mode_transition.last_changed %}
          {% if transition_time != none %}
            {{ (now() - transition_time).total_seconds() > 300 and states('sensor.aduro_change_in_progress') == 'true' }}
          {% else %}
            false
          {% endif %}
    actions:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_mode_transition
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_change_in_progress

  - id: "aduro_auto_turn_off_toggle_when_synced"
    alias: "Aduro turn off toggle when values are synced"
    mode: single
    triggers:
      - platform: state
        entity_id:
          - sensor.aduro_heatlevel_boolean_check
          - sensor.aduro_temp_boolean_check
          - sensor.aduro_operation_mode_boolean_check
        to: "OK"
    conditions:
      - condition: state
        entity_id: input_boolean.aduro_toggle_heat_target
        state: "on"
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: sensor.aduro_h2_operation_mode
                state: "0"
              - condition: state
                entity_id: sensor.aduro_heatlevel_boolean_check
                state: "OK"
          - condition: and
            conditions:
              - condition: state
                entity_id: sensor.aduro_h2_operation_mode
                state: "1"
              - condition: state
                entity_id: sensor.aduro_temp_boolean_check
                state: "OK"
    actions:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.aduro_toggle_heat_target
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_mode_transition
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_change_in_progress

  - id: "aduro_update_display_target"
    alias: "Aduro update display target on input change"
    mode: single
    triggers:
      - platform: state
        entity_id:
          - input_number.aduro_heatlevel
          - input_number.aduro_boiler_ref
    actions:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_display_target

  - id: "aduro_auto_turn_on_toggle_1"
    alias: "Aduro turn on toggle"
    mode: single
    triggers:
      - entity_id:
          - input_number.aduro_heatlevel
        trigger: state
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.aduro_temp_boolean_check
            - sensor.aduro_heatlevel_boolean_check
      - if:
          - condition: state
            entity_id: sensor.aduro_h2_operation_mode
            state: "1"
          - condition: state
            entity_id: sensor.aduro_heatlevel_boolean_check
            state: Difference
        then:
          - target:
              entity_id: input_boolean.aduro_toggle_heat_target
            action: input_boolean.turn_on
            data: {}
      - if:
          - condition: state
            entity_id: sensor.aduro_h2_operation_mode
            state: "0"
          - condition: state
            entity_id: sensor.aduro_temp_boolean_check
            state: Difference
        then:
          - target:
              entity_id: input_boolean.aduro_toggle_heat_target
            action: input_boolean.turn_on
            data: {}
      - target:
          entity_id: sensor.aduro_mode_transition
        action: homeassistant.update_entity
        data: {}
      - target:
          entity_id: sensor.aduro_change_in_progress
        action: homeassistant.update_entity
        data: {}

  - id: "aduro_auto_turn_on_toggle_2"
    alias: "Aduro turn on toggle"
    mode: single
    triggers:
      - entity_id:
          - input_number.aduro_boiler_ref
        trigger: state
    conditions: []
    actions:
      - action: homeassistant.update_entity
        metadata: {}
        data:
          entity_id:
            - sensor.aduro_temp_boolean_check
            - sensor.aduro_heatlevel_boolean_check
      - if:
          - condition: state
            entity_id: sensor.aduro_h2_operation_mode
            state: "1"
          - condition: state
            entity_id: sensor.aduro_heatlevel_boolean_check
            state: Difference
        then:
          - target:
              entity_id: input_boolean.aduro_toggle_heat_target
            action: input_boolean.turn_on
            data: {}
      - if:
          - condition: state
            entity_id: sensor.aduro_h2_operation_mode
            state: "0"
          - condition: state
            entity_id: sensor.aduro_temp_boolean_check
            state: Difference
        then:
          - target:
              entity_id: input_boolean.aduro_toggle_heat_target
            action: input_boolean.turn_on
            data: {}
      - target:
          entity_id: sensor.aduro_mode_transition
        action: homeassistant.update_entity
        data: {}
      - target:
          entity_id: sensor.aduro_change_in_progress
        action: homeassistant.update_entity
        data: {}

  - id: "aduro_mode_transition_tracking"
    alias: "Aduro Mode Transition Tracking"
    mode: single
    trigger:
      - platform: state
        entity_id:
          - input_number.aduro_heatlevel
          - input_number.aduro_boiler_ref
          - sensor.aduro_h2_operation_mode
    action:
      - service: homeassistant.update_entity
        target:
          entity_id:
            - sensor.aduro_operation_mode_target
            - sensor.aduro_display_target

  - id: "aduro_update_operation_mode_target_on_stove_change"
    alias: "Aduro update operation mode target on stove change"
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.aduro_h2_operation_mode
    conditions:
      - condition: template
        value_template: "{{ not is_state('input_boolean.aduro_toggle_heat_target', 'on') }}"
    action:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_operation_mode_target

  - id: "aduro_update_display_target_on_stove_change"
    alias: "Aduro update display target on stove changes"
    mode: single
    trigger:
      - platform: state
        entity_id:
          - sensor.aduro_h2_stove_heatlevel
          - sensor.aduro_h2_boiler_ref
    conditions:
      - condition: template
        value_template: "{{ not is_state('input_boolean.aduro_toggle_heat_target', 'on') }}"
    action:
      - service: homeassistant.update_entity
        target:
          entity_id: sensor.aduro_display_target

  - id: "aduro_update_operation_mode_target 1"
    alias: "Aduro update operation mode target 1"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_number.aduro_boiler_ref
    conditions: []
    actions:
      - action: input_number.set_value
        data:
          value: 1
        target:
          entity_id: input_number.aduro_operation_mode_target_2

  - id: "aduro_update_operation_mode_target 2"
    alias: "Aduro update operation mode target 2"
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - input_number.aduro_heatlevel
    conditions: []
    actions:
      - action: input_number.set_value
        data:
          value: 0
        target:
          entity_id: input_number.aduro_operation_mode_target_2

  - id: "aduro_toggle_heat_target_actions"
    alias: "Aduro Toggle Heat Target Actions"
    mode: parallel
    triggers:
      - platform: state
        entity_id: input_boolean.aduro_toggle_heat_target
        to: "on"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: sensor.aduro_h2_operation_mode
                state: "0"
            sequence:
              # Explicitly set boolean check to Difference
              - service: homeassistant.update_entity
                target:
                  entity_id:
                    - sensor.aduro_temp_boolean_check
                    - sensor.aduro_heatlevel_boolean_check
                    - sensor.aduro_operation_mode_boolean_check
                    - sensor.aduro_change_in_progress

              # When in heatlevel mode, switch to temperature mode
              - service: script.turn_on
                target:
                  entity_id: script.pyduro_set_operation_mode_temp

              # Force update of change in progress and related sensors
              - service: homeassistant.update_entity
                target:
                  entity_id:
                    - sensor.aduro_change_in_progress
                    - sensor.aduro_mode_transition
                    - sensor.aduro_display_format
                    - sensor.aduro_display_target
              - service: input_number.set_value
                target:
                  entity_id: input_number.aduro_operation_mode_target_2
                data:
                  value: 1
              - action: automation.trigger
                target:
                  entity_id: automation.aduro_mqtt_anrop_trigger

          - conditions:
              - condition: state
                entity_id: sensor.aduro_h2_operation_mode
                state: "1"
            sequence:
              # Explicitly set boolean check to Difference
              - service: homeassistant.update_entity
                target:
                  entity_id:
                    - sensor.aduro_temp_boolean_check
                    - sensor.aduro_heatlevel_boolean_check
                    - sensor.aduro_operation_mode_boolean_check
                    - sensor.aduro_change_in_progress

              # When in temperature mode, switch to heatlevel mode
              - service: script.turn_on
                target:
                  entity_id: script.pyduro_set_operation_mode_heatlevel

              # Force update of change in progress and related sensors
              - service: homeassistant.update_entity
                target:
                  entity_id:
                    - sensor.aduro_change_in_progress
                    - sensor.aduro_mode_transition
                    - sensor.aduro_display_format
                    - sensor.aduro_display_target
              - service: input_number.set_value
                target:
                  entity_id: input_number.aduro_operation_mode_target_2
                data:
                  value: 0
              - action: automation.trigger
                target:
                  entity_id: automation.aduro_mqtt_anrop_trigger

#### NOTIFICATIONS ####

  - id: "aduro_notification_low_on_pellets"
    alias: "Aduro Notifications low on pellets"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.aduro_percentage_pellets_in_stove
        below: input_number.aduro_notification_pellets_level
    conditions:
      - condition: template
        value_template: "{{ states('sensor.aduro_percentage_pellets_in_stove') != 'unknown' }}"
    actions:
      - action: script.actionable_notify
        data:
          who: all
          title: Kaminen
          message: Pelletsnivån är {{states('sensor.aduro_percentage_pellets_in_stove')}}%
          enable_timeout: false
          url: /lovelace/aduro
          group: warning

  - id: "aduro_shut_down_low_on_pellets"
    alias: "Aduro shut down low on pellets"
    mode: single
    trigger:
      - platform: numeric_state
        entity_id: sensor.aduro_percentage_pellets_in_stove
        below: input_number.aduro_shut_down_pellets_level
    conditions:
      - condition: template
        value_template: "{{ states('sensor.aduro_percentage_pellets_in_stove') != 'unknown' }}"
      - condition: state
        entity_id: input_boolean.aduro_shut_down_at_specific_pellets_level
        state: "on"
    actions:
      - action: script.actionable_notify
        data:
          who: all
          title: Kaminen
          message: Pelletsnivån är {{states('sensor.aduro_percentage_pellets_in_stove')}}%, vad vill du göra?.
          show_confirm: true
          show_dismiss: true
          confirm_text: Stänga av
          dismiss_text: Inget
          action_confirm_action: input_boolean.turn_off
          action_confirm_entity_id: input_boolean.aduro_start_stop
          enable_timeout: true
          timeout_fallback_action: input_boolean.turn_off
          timeout_fallback_entity_id: input_boolean.aduro_start_stop
          # action_taken_title: Title for notification when someone else takes action (default: 'Action Taken')
          # action_taken_message: Message when someone else takes action (default: 'Another user has already taken action.')
          # fallback_action_title: Title for timeout notification (default: 'Fallback Action Performed')
          fallback_action_message: Kaminen stängs nu av.
          url: /lovelace/aduro
          group: warning